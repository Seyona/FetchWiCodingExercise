To run this you'll need to have the following python libraries installed
- FastAPI (pip install FastAPI) if that doesn't work : py -m pip install FastAPI
- uvicorn (pip install uvicorn) if that doesn't work : py -m pip install uvicorn

To run the web service, execute the following command at the command line: py main.py
    - You should see a few messages pop up in your terminal window with the final message looking something like this
        **  ... Uvicorn running on ←[1mhttp://127.0.0.1:8000←[0m (Press CTRL+C to quit)


Once everything is running you should connect and run all api queries through 127.0.0.1:8000/
- Adding points example : http://127.0.0.1:8000/points/add/user/DANNON/200?date=10%2f31%2010AM

Alternatively,
- Navigate to http://127.0.0.1:8000/docs
- Click on the api call that you are interested in running
- click "Try it out" in the top right
- Enter the desired information and hit "execute"
- This is a little easier because you can type the date string without the %2f for '/' and %20 for spaces

=====================================================

Quick API Overview:
    - /user/createUser/{user_name}
        * Replace {user_name} with the user that you want to create
    - /points/balance/{user_name}
        * Replace {user_name} with the user that you want to check the balance for
    - /points/add/{user_name}/{payer_name}/{points}?date=
        * replace {user name} with the user you are adding point to
        * replace {payer_name} with the payer you are adding points for
        * replace {points} with an integer value representing the points you want to add
        * add a date after date= to specify the date the points were added
            ** Date should be in format m%2fd%20hAM/PM  IE: 11%2f15%2010AM represents 11/15 10AM
    - /points/deduct/{user_name}/{points}
        * replace {user_name} with the user that you want to deduct points from
        * replace {points} with a positive integer value representing the points you want to deduct

=====================================================


WARNING: If you restart the web service all data will be lost. You will need to rerun the api in the same order again
if you want to replicate the scenario that you had before the restart.


=====================================================

API calls to represent the example given in the pdf (These should be ran from your web browser or REST API client of your choice)

- Add points (These are put methods you should run them from your Rest API Client,
or through the swagger menu [http://127.0.0.1:8000/docs])

http://127.0.0.1:8000/points/add/user/DANNON/300?date=10%2F31%2010AM
http://127.0.0.1:8000/points/add/user/UNILEVER/200?date=10%2f31%2011AM
http://127.0.0.1:8000/points/add/user/DANNON/-200?date=10%2f31%203PM
http://127.0.0.1:8000/points/add/user/MILLER%20COORS/10000?date=11%2f1%202PM
http://127.0.0.1:8000/points/add/user/DANNON/1000?date=11%2f2%202PM

- Deduct Points (This is a patch method you should run them from your Rest API Client,
or through the swagger menu [http://127.0.0.1:8000/docs])

http://127.0.0.1:8000/points/deduct/user/5000

- Check Balance (This is a get method you can run it from your browser, rest api client, or the swagger menu)
http://127.0.0.1:8000/points/balance/user

=====================================================